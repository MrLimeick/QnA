В: Направления программирования:
О:
- Процедурное программирование: основано на разделении программы на отдельные функции или процедуры для упрощения управления сложными задачами.
- Объектно-ориентированное программирование (ООП): использует объекты и классы для организации кода, облегчения его повторного использования и поддержки модульности.
- Функциональное программирование: основывается на математических функциях и избегает изменяемых данных и состояния.
- Web-программирование: ориентировано на создание веб- сайтов и веб-приложений.
- Мобильное программирование: центрируется вокруг создания приложений под мобильные устройства и платформы.

В: Основные понятия алгоритмизации:
О: 
- Алгоритм: последовательность шагов для решения задачи.
- Алгоритмизация: процесс разработки алгоритма для решения конкретной задачи.
- Исполнитель алгоритма: субъект, осуществляющий последовательное выполнение шагов алгоритма.

В: Основные свойства алгоритма:
О: 
- Дискретность: алгоритм состоит из конечного числа шагов. - Определенность: каждый шаг алгоритма должен быть однозначно определен.
- Входные данные: алгоритм должен иметь входные данные.
- Выходные данные: алгоритм должен получить определенный результат.

В: Лексемы языка С/С++:
О: 
- Идентификаторы: используются для задания идентификации переменной, функции или другого объекта.
- Операции: арифметические операции (+, -, *, /), логические операции (&&, ||), операции сравнения (==, !=).

В: Основные формы записи алгоритмов:
О: 
- Блок-схемы: визуализируют последовательность шагов алгоритма с использованием блоков и стрелок.
- Псевдокод: использует структурированные языковые конструкции для описания алгоритмов.

В: Лексемы языка С/С++:
О: 
- Ключевые слова: слова с особым значением для языка программирования (например, if, else, for, while).
- Константы: фиксированные значения, которые не могут изменяться во время выполнения программы.

В: Переменные и типы данных:
О: 
- Переменные: хранилища для данных, каждая имеет тип.
- Типы данных: определяют характеристики переменных (целые числа, вещественные числа, символы, булевы значения и т.д.).

В: Структура программы и команда присваивания:
О: 
- Структура программы в языке программирования C/C++ обычно включает в себя директивы препроцессора, объявление переменных, определение функций, и тело программы.
- Команда присваивания (например, x = 5;) используется для присвоения значения переменной.

В: Ввод-вывод данных, функции scanf, printf и формат выводимых данных:
О: 
- Функция scanf используется для ввода данных с клавиатуры. - Функция printf используется для вывода данных на экран.
- Формат выводимых данных определяется с помощью спецификаторов формата, например %d для целых чисел и %f для вещественных чисел.

В: Принципы построения структуры цикла Пока (пример): 
О: 
- Структура цикла "while" имеет вид:
while (условие) { // тело цикла
}

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 

В: 
О: 